name: Make release
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+"

env:
  PROJECT_NAME: yahist
  SCRIPT_NAME: app/yahist.py

jobs:
  prepare:
    outputs:
      version: ${{ steps.set_version.outputs.value }}

    runs-on: ubuntu-latest
      
    steps:
      - name: Set version
        id: set_version
        run: echo "value=$(echo ${{ github.ref_name }} | sed 's/v//')" >> "$GITHUB_OUTPUT"

  build:
    needs: prepare
  
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-14]
      fail-fast: false

    runs-on: ${{ matrix.os }}
      
    steps:
      - name: Check-out repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.5.1

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create false

      - name: Poetry Install Dependencies
        run: |
          poetry install --no-interaction

      - name: Poetry Install Dependencies
        run: |
          echo "${{ needs.prepare.outputs.version }}"
          
      - name: Build Executable
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: ${{ env.SCRIPT_NAME }}

          product-name: ${{ env.PROJECT_NAME }}
          file-version: ${{ needs.prepare.outputs.version }}
          product-version: ${{ needs.prepare.outputs.version }}

          include-package-data: selenium
          # NOTE: Windows 向けで必要．動的に import しているモジュールがあるので，明示的に取り込む．
          include-package: jinxed

          windows-icon-from-ico: img/icon.png
          macos-app-icon: img/icon.png
          macos-app-name: ${{ env.PROJECT_NAME }}
          macos-create-app-bundle: false

          standalone: true
          onefile: true

          no-deployment-flag: self-execution

      - name: Check if secret exists
        id: check_secret
        shell: pwsh
        run: |
          if ("${{ secrets.PASSWORD }}" -ne "") {
            Write-Output "secret_exists=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Output "secret_exists=false" >> $env:GITHUB_OUTPUT
          }

      - name: Sign code
        if: (runner.os == 'Windows') && (steps.check_secret.outputs.secret_exists == 'true')
        uses: kimata/code-sign-action@v1
        with:
          file: build/*.exe
          certificate-data: ${{ secrets.CERTIFICATE }}
          certificate-password: ${{ secrets.PASSWORD }}

      - name: Copy bundle file
        run: |
          cp README.md build/README.md
          cp config.example.yaml build/config.example.yaml
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.os }} build"
          path: |
            build/*.exe
            build/*.bin
            build/*.app/**/*
            build/config.example.yaml
            build/README.md

  release:
    needs: build

    outputs:
      upload_url: ${{ steps.save_upload_url.outputs.value }}

    runs-on: ubuntu-latest

    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          
      - name: Save upload_url
        id: save_upload_url
        run: echo "value=${{ steps.create_release.outputs.upload_url }}" >> "$GITHUB_OUTPUT"

  release-binary:
    needs: [ prepare, release ]

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-14]
        include:
          - os: ubuntu-latest
            label: ubuntu_x64
          - os: windows-latest
            label: windows_x64
          - os: macos-14
            label: macos_apple

    runs-on: ubuntu-latest
 
    steps:
      - name: Define names
        run: |
          echo "ARCHIVE_NAME=${{ env.PROJECT_NAME }}-${{ matrix.os }}-binary-${{ needs.prepare.outputs.version }}" >> $GITHUB_ENV
          echo "ARCHIVE_LABEL=${{ env.PROJECT_NAME }}-${{ matrix.label }}-binary-${{ needs.prepare.outputs.version }}" >> $GITHUB_ENV
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: "${{ matrix.os }} build"
          path: ${{ env.ARCHIVE_NAME }}

      - name: Set execution permission
        run: |
          chmod -f +x ${{ env.ARCHIVE_NAME }}/*.bin || true

      - name: Archive binary
        run: zip --junk-paths --recurse-paths ${{ env.ARCHIVE_NAME }}.zip ${{ env.ARCHIVE_NAME }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.release.outputs.upload_url}}
          asset_name: ${{ env.ARCHIVE_LABEL }}.zip
          asset_path: ${{ env.ARCHIVE_NAME }}.zip
          asset_content_type: application/octet-stream
